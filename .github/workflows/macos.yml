name: Build for macOS

on:
  push:
    branches-ignore:
      - 'translations_*'
    tags: []
  pull_request:
    paths-ignore:
      - '**.po'

# TODO: Fix the macOS build for compiling and building VROOM with vrprouting.
jobs:
  build:
    name: Build
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: install deps
        run: |
          brew install postgis boost pgrouting

      - name: Install VROOM dependencies
        run: |
          brew install openssl asio glpk

      - name: Build VROOM v1.10.0
        run: |
          wget https://github.com/VROOM-Project/vroom/archive/refs/tags/v1.10.0.tar.gz
          tar -zvxf v1.10.0.tar.gz
          cd vroom-1.10.0/src

          # Source: https://github.com/VROOM-Project/vroom/issues/378
          ln -s /usr/local/opt/openssl/include/openssl /usr/local/include
          ln -s /usr/local/opt/openssl/lib/libssl.dylib /usr/local/lib/
          ln -s /usr/local/opt/openssl/lib/libcrypto.dylib /usr/local/lib/

          # Create object file with position independent code using -fPIC flag
          sed -i '' -e 's/CXXFLAGS = /CXXFLAGS = -fPIC /' makefile
          sed -i '' -e 's/\/usr\/include\/glpk.h/\/usr\/local\/opt\/glpk\/include\/glpk.h/' makefile

          make
          cd ..
          echo "VROOM_INSTALL_PATH=$(pwd)" >> $GITHUB_ENV

      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DWITH_DOC=OFF -DVROOM_INSTALL_PATH=${VROOM_INSTALL_PATH} ..

      - name: Build
        run: |
          cd build
          make -j
          sudo make install

      - name: Cache pgtap
        id: cache-pgtap
        uses: actions/cache@v2
        with:
          path: ./pgTapExtension/
          key: ${{ runner.os }}-pgtap-${{ hashFiles('**/packages*.txt') }}

      - name: Get pgtap repo
        if: steps.cache-pgtap.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: theory/pgtap
          path: ./pgTapExtension/

      - name: Install pgTAP
        if: steps.cache-pgtap.outputs.cache-hit != 'true'
        run: |
          cd ./pgTapExtension/
          make -j
          sudo make install
          cpan TAP::Parser::SourceHandler::pgTAP

      - name: Install pgTAP
        if: steps.cache-pgtap.outputs.cache-hit == 'true'
        run: |
          cd ./pgTapExtension/
          sudo make install
          cpan TAP::Parser::SourceHandler::pgTAP

      - name: Unpack data
        run: |
          cd tools/testers
          tar -xf matrix_new_values.tar.gz

      - name: Test
        run: |
          export PATH=/usr/local/Cellar/perl/$(perl -e 'print substr($^V, 1)')/bin:$PATH
          pg_ctl -D /usr/local/var/postgres start
          createuser -s postgres
          createdb ___vrp___test___
          cd tools/testers
          psql -p 5432 -U postgres -d ___vrp___test___ -X -q -v ON_ERROR_STOP=1 --pset pager=off -f setup_db.sql
          psql -p 5432 -U postgres -d ___vrp___test___ -c "SELECT * FROM pgr_full_version();"
          pg_prove --failures --quiet --recurse --ext .sql -p 5432 -d ___vrp___test___ -U postgres ../../pgtap/
